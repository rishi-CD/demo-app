pipeline {
    agent any
    tools {
        maven '3.9.9'
    }
    stages {
        stage('Verify Tools') {
            steps {
                echo "Verifying Java, Maven, Git, and Docker versions"
                bat """
                    REM Maven check
                    FOR /F "tokens=3" %%a IN ('mvn -v ^| findstr "Apache"') DO SET MAVEN_VER=%%a
                    ECHO Detected Maven version: %MAVEN_VER%

                    REM Git check
                    FOR /F "tokens=3" %%a IN ('git --version') DO SET GIT_VER=%%a
                    ECHO Detected Git version: %GIT_VER%

                    REM Docker check
                    FOR /F "tokens=3 delims=," %%a IN ('docker --version') DO SET DOCKER_VER=%%a
                    ECHO Detected Docker version: %DOCKER_VER%
                """
            }
        }

        stage('Compile and Clean') {
            steps {
                bat 'mvn clean compile'
            }
        }

        stage('Package') {
            steps {
                bat 'mvn package'
            }
        }

        stage('Docker Cleanup') {
    steps {
        echo "Cleaning up old Docker containers and images"
        bat """
            REM ===== Stop any container using port 8088 =====
            FOR /F "tokens=*" %%c IN ('docker ps -q -f "publish=8088"') DO (
                ECHO Stopping old container: %%c
                docker stop %%c
                docker rm %%c
            )

            REM ===== Remove old images with the same name =====
            FOR /F "tokens=*" %%i IN ('docker images -q rishi-CD/demo-app') DO (
                ECHO Removing old image: %%i
                docker rmi -f %%i
            )

            ECHO Docker cleanup completed!
        """
    }
}

        stage('Build Docker Image') {
            steps {
                echo "Building Docker image"
                bat 'docker build -t rishi-CD/demo-app:%BUILD_NUMBER% .'
            }
        }

        stage('Docker Login') {
            steps {
                withCredentials([string(credentialsId: 'dockerId1', variable: 'Dockerpwd')]) {
                    bat 'docker login -u rishi-CD -p %Dockerpwd%'
                }
            }
        }

        stage('Docker Push') {
            steps {
                bat 'docker push rishi-CD/demo-app:%BUILD_NUMBER%'
            }
        }

        stage('Docker Deploy') {
            steps {
                bat 'docker run -d -p 8088:8088 rishi-CD/demo-app:%BUILD_NUMBER%'
            }
        }

        stage('Archive Artifacts') {
            steps {
                archiveArtifacts '**/target/*.jar'
            }
        }
    }
}
